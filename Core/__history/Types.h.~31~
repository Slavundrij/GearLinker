// ---------------------------------------------------------------------------

#ifndef TypesH
#define TypesH

#include <vector>
#include <System.Classes.hpp>

using namespace std;
// ---------------------------------------------------------------------------

struct stMeasurement {
    UnicodeString sKeyMeasure;
    double fNominalValue;
    double fToleranceUp;
    double fToleranceDown;

    double fMeasure;

    bool bValidData = false;
};


/*Класс описания ПГТС.xxxxxx.xxx-xx*/
class TDesignation {
public:
    TDesignation();
    TDesignation(UnicodeString _sDesignation);
    TDesignation(UnicodeString _sCodeDeveloper, unsigned int _uiClassification,
        unsigned int _uiRegistrationNumber, unsigned int _uiVariation);

    ~TDesignation();

    void vUpdate(UnicodeString _sCodeDeveloper, unsigned int _uiClassification,
        unsigned int _uiRegistrationNumber, unsigned int _uiVariation);

    UnicodeString getStringDesignation();

private:
    bool flagExist = false;

    UnicodeString sCodeDeveloper;
    unsigned int uiClassification;
    unsigned int uiRegistrationNumber;
    unsigned int uiVariation;

};

/////////////////////////////////////////////////////////////
/*Шестерня, имеет Номер ПГТС.., Номер заказа, Название, Список измерений*/
class TGear {
public:
	TGear(TDesignation _Desgination, unsigned int _uiOrder,
		UnicodeString _sName, UnicodeString _sNumber);
    ~TGear();

    TDesignation Desgination; // Номер детали - ПГТС. ...
    unsigned int uiOrder; // Номер заказа
    UnicodeString sName; // Название детали (чтоб было)
    UnicodeString sNumber; // Номер детали (на нем отмечено типо)
    TList *listParams;

private:
};

class TGearing {
public:
    TGearing();
	~TGearing();

private:
	TGear* Gear1;
	TGear* Gear2;

};

class TGearbox {
public:
    TGearbox();
    ~TGearbox();

private:
};

#endif
